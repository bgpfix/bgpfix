// Code generated by "enumer -type Dir -trimprefix DIR_"; DO NOT EDIT.

package msg

import (
	"fmt"
	"strings"
)

const _DirName = "ANYLR"

var _DirIndex = [...]uint8{0, 3, 4, 5}

const _DirLowerName = "anylr"

func (i Dir) String() string {
	if i >= Dir(len(_DirIndex)-1) {
		return fmt.Sprintf("Dir(%d)", i)
	}
	return _DirName[_DirIndex[i]:_DirIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DirNoOp() {
	var x [1]struct{}
	_ = x[DIR_ANY-(0)]
	_ = x[DIR_L-(1)]
	_ = x[DIR_R-(2)]
}

var _DirValues = []Dir{DIR_ANY, DIR_L, DIR_R}

var _DirNameToValueMap = map[string]Dir{
	_DirName[0:3]:      DIR_ANY,
	_DirLowerName[0:3]: DIR_ANY,
	_DirName[3:4]:      DIR_L,
	_DirLowerName[3:4]: DIR_L,
	_DirName[4:5]:      DIR_R,
	_DirLowerName[4:5]: DIR_R,
}

var _DirNames = []string{
	_DirName[0:3],
	_DirName[3:4],
	_DirName[4:5],
}

// DirString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DirString(s string) (Dir, error) {
	if val, ok := _DirNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DirNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Dir values", s)
}

// DirValues returns all values of the enum
func DirValues() []Dir {
	return _DirValues
}

// DirStrings returns a slice of all String values of the enum
func DirStrings() []string {
	strs := make([]string, len(_DirNames))
	copy(strs, _DirNames)
	return strs
}

// IsADir returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Dir) IsADir() bool {
	for _, v := range _DirValues {
		if i == v {
			return true
		}
	}
	return false
}
