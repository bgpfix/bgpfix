// Code generated by "enumer -type Afi -trimprefix AFI_"; DO NOT EDIT.

package msg

import (
	"fmt"
	"strings"
)

const (
	_AfiName_0      = "IPV4IPV6"
	_AfiLowerName_0 = "ipv4ipv6"
	_AfiName_1      = "L2VPNMPLS_SECTIONMPLS_LSPMPLS_PSEUDOWIREMT_IPV4MT_IPV6SFC"
	_AfiLowerName_1 = "l2vpnmpls_sectionmpls_lspmpls_pseudowiremt_ipv4mt_ipv6sfc"
	_AfiName_2      = "LS"
	_AfiLowerName_2 = "ls"
	_AfiName_3      = "ROUTING_POLICYMPLS_NAMESPACES"
	_AfiLowerName_3 = "routing_policympls_namespaces"
)

var (
	_AfiIndex_0 = [...]uint8{0, 4, 8}
	_AfiIndex_1 = [...]uint8{0, 5, 17, 25, 40, 47, 54, 57}
	_AfiIndex_2 = [...]uint8{0, 2}
	_AfiIndex_3 = [...]uint8{0, 14, 29}
)

func (i Afi) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _AfiName_0[_AfiIndex_0[i]:_AfiIndex_0[i+1]]
	case 25 <= i && i <= 31:
		i -= 25
		return _AfiName_1[_AfiIndex_1[i]:_AfiIndex_1[i+1]]
	case i == 16388:
		return _AfiName_2
	case 16398 <= i && i <= 16399:
		i -= 16398
		return _AfiName_3[_AfiIndex_3[i]:_AfiIndex_3[i+1]]
	default:
		return fmt.Sprintf("Afi(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AfiNoOp() {
	var x [1]struct{}
	_ = x[AFI_IPV4-(1)]
	_ = x[AFI_IPV6-(2)]
	_ = x[AFI_L2VPN-(25)]
	_ = x[AFI_MPLS_SECTION-(26)]
	_ = x[AFI_MPLS_LSP-(27)]
	_ = x[AFI_MPLS_PSEUDOWIRE-(28)]
	_ = x[AFI_MT_IPV4-(29)]
	_ = x[AFI_MT_IPV6-(30)]
	_ = x[AFI_SFC-(31)]
	_ = x[AFI_LS-(16388)]
	_ = x[AFI_ROUTING_POLICY-(16398)]
	_ = x[AFI_MPLS_NAMESPACES-(16399)]
}

var _AfiValues = []Afi{AFI_IPV4, AFI_IPV6, AFI_L2VPN, AFI_MPLS_SECTION, AFI_MPLS_LSP, AFI_MPLS_PSEUDOWIRE, AFI_MT_IPV4, AFI_MT_IPV6, AFI_SFC, AFI_LS, AFI_ROUTING_POLICY, AFI_MPLS_NAMESPACES}

var _AfiNameToValueMap = map[string]Afi{
	_AfiName_0[0:4]:        AFI_IPV4,
	_AfiLowerName_0[0:4]:   AFI_IPV4,
	_AfiName_0[4:8]:        AFI_IPV6,
	_AfiLowerName_0[4:8]:   AFI_IPV6,
	_AfiName_1[0:5]:        AFI_L2VPN,
	_AfiLowerName_1[0:5]:   AFI_L2VPN,
	_AfiName_1[5:17]:       AFI_MPLS_SECTION,
	_AfiLowerName_1[5:17]:  AFI_MPLS_SECTION,
	_AfiName_1[17:25]:      AFI_MPLS_LSP,
	_AfiLowerName_1[17:25]: AFI_MPLS_LSP,
	_AfiName_1[25:40]:      AFI_MPLS_PSEUDOWIRE,
	_AfiLowerName_1[25:40]: AFI_MPLS_PSEUDOWIRE,
	_AfiName_1[40:47]:      AFI_MT_IPV4,
	_AfiLowerName_1[40:47]: AFI_MT_IPV4,
	_AfiName_1[47:54]:      AFI_MT_IPV6,
	_AfiLowerName_1[47:54]: AFI_MT_IPV6,
	_AfiName_1[54:57]:      AFI_SFC,
	_AfiLowerName_1[54:57]: AFI_SFC,
	_AfiName_2[0:2]:        AFI_LS,
	_AfiLowerName_2[0:2]:   AFI_LS,
	_AfiName_3[0:14]:       AFI_ROUTING_POLICY,
	_AfiLowerName_3[0:14]:  AFI_ROUTING_POLICY,
	_AfiName_3[14:29]:      AFI_MPLS_NAMESPACES,
	_AfiLowerName_3[14:29]: AFI_MPLS_NAMESPACES,
}

var _AfiNames = []string{
	_AfiName_0[0:4],
	_AfiName_0[4:8],
	_AfiName_1[0:5],
	_AfiName_1[5:17],
	_AfiName_1[17:25],
	_AfiName_1[25:40],
	_AfiName_1[40:47],
	_AfiName_1[47:54],
	_AfiName_1[54:57],
	_AfiName_2[0:2],
	_AfiName_3[0:14],
	_AfiName_3[14:29],
}

// AfiString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AfiString(s string) (Afi, error) {
	if val, ok := _AfiNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AfiNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Afi values", s)
}

// AfiValues returns all values of the enum
func AfiValues() []Afi {
	return _AfiValues
}

// AfiStrings returns a slice of all String values of the enum
func AfiStrings() []string {
	strs := make([]string, len(_AfiNames))
	copy(strs, _AfiNames)
	return strs
}

// IsAAfi returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Afi) IsAAfi() bool {
	for _, v := range _AfiValues {
		if i == v {
			return true
		}
	}
	return false
}
