// Code generated by "enumer -type Dst -trimprefix DST_"; DO NOT EDIT.

package msg

import (
	"fmt"
	"strings"
)

const _DstName = "XLR"

var _DstIndex = [...]uint8{0, 1, 2, 3}

const _DstLowerName = "xlr"

func (i Dst) String() string {
	if i >= Dst(len(_DstIndex)-1) {
		return fmt.Sprintf("Dst(%d)", i)
	}
	return _DstName[_DstIndex[i]:_DstIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DstNoOp() {
	var x [1]struct{}
	_ = x[DST_X-(0)]
	_ = x[DST_L-(1)]
	_ = x[DST_R-(2)]
}

var _DstValues = []Dst{DST_X, DST_L, DST_R}

var _DstNameToValueMap = map[string]Dst{
	_DstName[0:1]:      DST_X,
	_DstLowerName[0:1]: DST_X,
	_DstName[1:2]:      DST_L,
	_DstLowerName[1:2]: DST_L,
	_DstName[2:3]:      DST_R,
	_DstLowerName[2:3]: DST_R,
}

var _DstNames = []string{
	_DstName[0:1],
	_DstName[1:2],
	_DstName[2:3],
}

// DstString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DstString(s string) (Dst, error) {
	if val, ok := _DstNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DstNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Dst values", s)
}

// DstValues returns all values of the enum
func DstValues() []Dst {
	return _DstValues
}

// DstStrings returns a slice of all String values of the enum
func DstStrings() []string {
	strs := make([]string, len(_DstNames))
	copy(strs, _DstNames)
	return strs
}

// IsADst returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Dst) IsADst() bool {
	for _, v := range _DstValues {
		if i == v {
			return true
		}
	}
	return false
}
