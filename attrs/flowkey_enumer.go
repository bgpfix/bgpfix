// Code generated by "enumer -type FlowKey -trimprefix FLOW_"; DO NOT EDIT.

package attrs

import (
	"fmt"
	"strings"
)

const _FlowKeyName = "DSTSRCPROTOPORTPORT_DSTPORT_SRCICMP_TYPEICMP_CODETCP_FLAGSPKTLENDSCPFRAGLABEL"

var _FlowKeyIndex = [...]uint8{0, 3, 6, 11, 15, 23, 31, 40, 49, 58, 64, 68, 72, 77}

const _FlowKeyLowerName = "dstsrcprotoportport_dstport_srcicmp_typeicmp_codetcp_flagspktlendscpfraglabel"

func (i FlowKey) String() string {
	i -= 1
	if i >= FlowKey(len(_FlowKeyIndex)-1) {
		return fmt.Sprintf("FlowKey(%d)", i+1)
	}
	return _FlowKeyName[_FlowKeyIndex[i]:_FlowKeyIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FlowKeyNoOp() {
	var x [1]struct{}
	_ = x[FLOW_DST-(1)]
	_ = x[FLOW_SRC-(2)]
	_ = x[FLOW_PROTO-(3)]
	_ = x[FLOW_PORT-(4)]
	_ = x[FLOW_PORT_DST-(5)]
	_ = x[FLOW_PORT_SRC-(6)]
	_ = x[FLOW_ICMP_TYPE-(7)]
	_ = x[FLOW_ICMP_CODE-(8)]
	_ = x[FLOW_TCP_FLAGS-(9)]
	_ = x[FLOW_PKTLEN-(10)]
	_ = x[FLOW_DSCP-(11)]
	_ = x[FLOW_FRAG-(12)]
	_ = x[FLOW_LABEL-(13)]
}

var _FlowKeyValues = []FlowKey{FLOW_DST, FLOW_SRC, FLOW_PROTO, FLOW_PORT, FLOW_PORT_DST, FLOW_PORT_SRC, FLOW_ICMP_TYPE, FLOW_ICMP_CODE, FLOW_TCP_FLAGS, FLOW_PKTLEN, FLOW_DSCP, FLOW_FRAG, FLOW_LABEL}

var _FlowKeyNameToValueMap = map[string]FlowKey{
	_FlowKeyName[0:3]:        FLOW_DST,
	_FlowKeyLowerName[0:3]:   FLOW_DST,
	_FlowKeyName[3:6]:        FLOW_SRC,
	_FlowKeyLowerName[3:6]:   FLOW_SRC,
	_FlowKeyName[6:11]:       FLOW_PROTO,
	_FlowKeyLowerName[6:11]:  FLOW_PROTO,
	_FlowKeyName[11:15]:      FLOW_PORT,
	_FlowKeyLowerName[11:15]: FLOW_PORT,
	_FlowKeyName[15:23]:      FLOW_PORT_DST,
	_FlowKeyLowerName[15:23]: FLOW_PORT_DST,
	_FlowKeyName[23:31]:      FLOW_PORT_SRC,
	_FlowKeyLowerName[23:31]: FLOW_PORT_SRC,
	_FlowKeyName[31:40]:      FLOW_ICMP_TYPE,
	_FlowKeyLowerName[31:40]: FLOW_ICMP_TYPE,
	_FlowKeyName[40:49]:      FLOW_ICMP_CODE,
	_FlowKeyLowerName[40:49]: FLOW_ICMP_CODE,
	_FlowKeyName[49:58]:      FLOW_TCP_FLAGS,
	_FlowKeyLowerName[49:58]: FLOW_TCP_FLAGS,
	_FlowKeyName[58:64]:      FLOW_PKTLEN,
	_FlowKeyLowerName[58:64]: FLOW_PKTLEN,
	_FlowKeyName[64:68]:      FLOW_DSCP,
	_FlowKeyLowerName[64:68]: FLOW_DSCP,
	_FlowKeyName[68:72]:      FLOW_FRAG,
	_FlowKeyLowerName[68:72]: FLOW_FRAG,
	_FlowKeyName[72:77]:      FLOW_LABEL,
	_FlowKeyLowerName[72:77]: FLOW_LABEL,
}

var _FlowKeyNames = []string{
	_FlowKeyName[0:3],
	_FlowKeyName[3:6],
	_FlowKeyName[6:11],
	_FlowKeyName[11:15],
	_FlowKeyName[15:23],
	_FlowKeyName[23:31],
	_FlowKeyName[31:40],
	_FlowKeyName[40:49],
	_FlowKeyName[49:58],
	_FlowKeyName[58:64],
	_FlowKeyName[64:68],
	_FlowKeyName[68:72],
	_FlowKeyName[72:77],
}

// FlowKeyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FlowKeyString(s string) (FlowKey, error) {
	if val, ok := _FlowKeyNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FlowKeyNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FlowKey values", s)
}

// FlowKeyValues returns all values of the enum
func FlowKeyValues() []FlowKey {
	return _FlowKeyValues
}

// FlowKeyStrings returns a slice of all String values of the enum
func FlowKeyStrings() []string {
	strs := make([]string, len(_FlowKeyNames))
	copy(strs, _FlowKeyNames)
	return strs
}

// IsAFlowKey returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FlowKey) IsAFlowKey() bool {
	for _, v := range _FlowKeyValues {
		if i == v {
			return true
		}
	}
	return false
}
