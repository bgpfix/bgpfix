// Code generated by "enumer -type=Code -trimprefix ATTR_"; DO NOT EDIT.

package attrs

import (
	"fmt"
	"strings"
)

const (
	_CodeName_0      = "UNSPECIFIEDORIGINASPATHNEXTHOPMEDLOCALPREFAGGREGATEAGGREGATORCOMMUNITYORIGINATORCLUSTER_LIST"
	_CodeLowerName_0 = "unspecifiedoriginaspathnexthopmedlocalprefaggregateaggregatorcommunityoriginatorcluster_list"
	_CodeName_1      = "MP_REACHMP_UNREACHEXT_COMMUNITYAS4PATHAS4AGGREGATOR"
	_CodeLowerName_1 = "mp_reachmp_unreachext_communityas4pathas4aggregator"
	_CodeName_2      = "PMSI_TUNNELTUNNELTRAFFIC_ENGIPV6_EXT_COMMUNITYAIGPPE_DISTING"
	_CodeLowerName_2 = "pmsi_tunneltunneltraffic_engipv6_ext_communityaigppe_disting"
	_CodeName_3      = "BGP_LS"
	_CodeLowerName_3 = "bgp_ls"
	_CodeName_4      = "LARGE_COMMUNITYBGPSEC_PATH"
	_CodeLowerName_4 = "large_communitybgpsec_path"
	_CodeName_5      = "OTCDPATHSFP_ATTRBFD_DISCRIMINATORRCAPREFIX_SID"
	_CodeLowerName_5 = "otcdpathsfp_attrbfd_discriminatorrcaprefix_sid"
	_CodeName_6      = "SET"
	_CodeLowerName_6 = "set"
)

var (
	_CodeIndex_0 = [...]uint8{0, 11, 17, 23, 30, 33, 42, 51, 61, 70, 80, 92}
	_CodeIndex_1 = [...]uint8{0, 8, 18, 31, 38, 51}
	_CodeIndex_2 = [...]uint8{0, 11, 17, 28, 46, 50, 60}
	_CodeIndex_3 = [...]uint8{0, 6}
	_CodeIndex_4 = [...]uint8{0, 15, 26}
	_CodeIndex_5 = [...]uint8{0, 3, 8, 16, 33, 36, 46}
	_CodeIndex_6 = [...]uint8{0, 3}
)

func (i Code) String() string {
	switch {
	case 0 <= i && i <= 10:
		return _CodeName_0[_CodeIndex_0[i]:_CodeIndex_0[i+1]]
	case 14 <= i && i <= 18:
		i -= 14
		return _CodeName_1[_CodeIndex_1[i]:_CodeIndex_1[i+1]]
	case 22 <= i && i <= 27:
		i -= 22
		return _CodeName_2[_CodeIndex_2[i]:_CodeIndex_2[i+1]]
	case i == 29:
		return _CodeName_3
	case 32 <= i && i <= 33:
		i -= 32
		return _CodeName_4[_CodeIndex_4[i]:_CodeIndex_4[i+1]]
	case 35 <= i && i <= 40:
		i -= 35
		return _CodeName_5[_CodeIndex_5[i]:_CodeIndex_5[i+1]]
	case i == 128:
		return _CodeName_6
	default:
		return fmt.Sprintf("Code(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CodeNoOp() {
	var x [1]struct{}
	_ = x[ATTR_UNSPECIFIED-(0)]
	_ = x[ATTR_ORIGIN-(1)]
	_ = x[ATTR_ASPATH-(2)]
	_ = x[ATTR_NEXTHOP-(3)]
	_ = x[ATTR_MED-(4)]
	_ = x[ATTR_LOCALPREF-(5)]
	_ = x[ATTR_AGGREGATE-(6)]
	_ = x[ATTR_AGGREGATOR-(7)]
	_ = x[ATTR_COMMUNITY-(8)]
	_ = x[ATTR_ORIGINATOR-(9)]
	_ = x[ATTR_CLUSTER_LIST-(10)]
	_ = x[ATTR_MP_REACH-(14)]
	_ = x[ATTR_MP_UNREACH-(15)]
	_ = x[ATTR_EXT_COMMUNITY-(16)]
	_ = x[ATTR_AS4PATH-(17)]
	_ = x[ATTR_AS4AGGREGATOR-(18)]
	_ = x[ATTR_PMSI_TUNNEL-(22)]
	_ = x[ATTR_TUNNEL-(23)]
	_ = x[ATTR_TRAFFIC_ENG-(24)]
	_ = x[ATTR_IPV6_EXT_COMMUNITY-(25)]
	_ = x[ATTR_AIGP-(26)]
	_ = x[ATTR_PE_DISTING-(27)]
	_ = x[ATTR_BGP_LS-(29)]
	_ = x[ATTR_LARGE_COMMUNITY-(32)]
	_ = x[ATTR_BGPSEC_PATH-(33)]
	_ = x[ATTR_OTC-(35)]
	_ = x[ATTR_DPATH-(36)]
	_ = x[ATTR_SFP_ATTR-(37)]
	_ = x[ATTR_BFD_DISCRIMINATOR-(38)]
	_ = x[ATTR_RCA-(39)]
	_ = x[ATTR_PREFIX_SID-(40)]
	_ = x[ATTR_SET-(128)]
}

var _CodeValues = []Code{ATTR_UNSPECIFIED, ATTR_ORIGIN, ATTR_ASPATH, ATTR_NEXTHOP, ATTR_MED, ATTR_LOCALPREF, ATTR_AGGREGATE, ATTR_AGGREGATOR, ATTR_COMMUNITY, ATTR_ORIGINATOR, ATTR_CLUSTER_LIST, ATTR_MP_REACH, ATTR_MP_UNREACH, ATTR_EXT_COMMUNITY, ATTR_AS4PATH, ATTR_AS4AGGREGATOR, ATTR_PMSI_TUNNEL, ATTR_TUNNEL, ATTR_TRAFFIC_ENG, ATTR_IPV6_EXT_COMMUNITY, ATTR_AIGP, ATTR_PE_DISTING, ATTR_BGP_LS, ATTR_LARGE_COMMUNITY, ATTR_BGPSEC_PATH, ATTR_OTC, ATTR_DPATH, ATTR_SFP_ATTR, ATTR_BFD_DISCRIMINATOR, ATTR_RCA, ATTR_PREFIX_SID, ATTR_SET}

var _CodeNameToValueMap = map[string]Code{
	_CodeName_0[0:11]:       ATTR_UNSPECIFIED,
	_CodeLowerName_0[0:11]:  ATTR_UNSPECIFIED,
	_CodeName_0[11:17]:      ATTR_ORIGIN,
	_CodeLowerName_0[11:17]: ATTR_ORIGIN,
	_CodeName_0[17:23]:      ATTR_ASPATH,
	_CodeLowerName_0[17:23]: ATTR_ASPATH,
	_CodeName_0[23:30]:      ATTR_NEXTHOP,
	_CodeLowerName_0[23:30]: ATTR_NEXTHOP,
	_CodeName_0[30:33]:      ATTR_MED,
	_CodeLowerName_0[30:33]: ATTR_MED,
	_CodeName_0[33:42]:      ATTR_LOCALPREF,
	_CodeLowerName_0[33:42]: ATTR_LOCALPREF,
	_CodeName_0[42:51]:      ATTR_AGGREGATE,
	_CodeLowerName_0[42:51]: ATTR_AGGREGATE,
	_CodeName_0[51:61]:      ATTR_AGGREGATOR,
	_CodeLowerName_0[51:61]: ATTR_AGGREGATOR,
	_CodeName_0[61:70]:      ATTR_COMMUNITY,
	_CodeLowerName_0[61:70]: ATTR_COMMUNITY,
	_CodeName_0[70:80]:      ATTR_ORIGINATOR,
	_CodeLowerName_0[70:80]: ATTR_ORIGINATOR,
	_CodeName_0[80:92]:      ATTR_CLUSTER_LIST,
	_CodeLowerName_0[80:92]: ATTR_CLUSTER_LIST,
	_CodeName_1[0:8]:        ATTR_MP_REACH,
	_CodeLowerName_1[0:8]:   ATTR_MP_REACH,
	_CodeName_1[8:18]:       ATTR_MP_UNREACH,
	_CodeLowerName_1[8:18]:  ATTR_MP_UNREACH,
	_CodeName_1[18:31]:      ATTR_EXT_COMMUNITY,
	_CodeLowerName_1[18:31]: ATTR_EXT_COMMUNITY,
	_CodeName_1[31:38]:      ATTR_AS4PATH,
	_CodeLowerName_1[31:38]: ATTR_AS4PATH,
	_CodeName_1[38:51]:      ATTR_AS4AGGREGATOR,
	_CodeLowerName_1[38:51]: ATTR_AS4AGGREGATOR,
	_CodeName_2[0:11]:       ATTR_PMSI_TUNNEL,
	_CodeLowerName_2[0:11]:  ATTR_PMSI_TUNNEL,
	_CodeName_2[11:17]:      ATTR_TUNNEL,
	_CodeLowerName_2[11:17]: ATTR_TUNNEL,
	_CodeName_2[17:28]:      ATTR_TRAFFIC_ENG,
	_CodeLowerName_2[17:28]: ATTR_TRAFFIC_ENG,
	_CodeName_2[28:46]:      ATTR_IPV6_EXT_COMMUNITY,
	_CodeLowerName_2[28:46]: ATTR_IPV6_EXT_COMMUNITY,
	_CodeName_2[46:50]:      ATTR_AIGP,
	_CodeLowerName_2[46:50]: ATTR_AIGP,
	_CodeName_2[50:60]:      ATTR_PE_DISTING,
	_CodeLowerName_2[50:60]: ATTR_PE_DISTING,
	_CodeName_3[0:6]:        ATTR_BGP_LS,
	_CodeLowerName_3[0:6]:   ATTR_BGP_LS,
	_CodeName_4[0:15]:       ATTR_LARGE_COMMUNITY,
	_CodeLowerName_4[0:15]:  ATTR_LARGE_COMMUNITY,
	_CodeName_4[15:26]:      ATTR_BGPSEC_PATH,
	_CodeLowerName_4[15:26]: ATTR_BGPSEC_PATH,
	_CodeName_5[0:3]:        ATTR_OTC,
	_CodeLowerName_5[0:3]:   ATTR_OTC,
	_CodeName_5[3:8]:        ATTR_DPATH,
	_CodeLowerName_5[3:8]:   ATTR_DPATH,
	_CodeName_5[8:16]:       ATTR_SFP_ATTR,
	_CodeLowerName_5[8:16]:  ATTR_SFP_ATTR,
	_CodeName_5[16:33]:      ATTR_BFD_DISCRIMINATOR,
	_CodeLowerName_5[16:33]: ATTR_BFD_DISCRIMINATOR,
	_CodeName_5[33:36]:      ATTR_RCA,
	_CodeLowerName_5[33:36]: ATTR_RCA,
	_CodeName_5[36:46]:      ATTR_PREFIX_SID,
	_CodeLowerName_5[36:46]: ATTR_PREFIX_SID,
	_CodeName_6[0:3]:        ATTR_SET,
	_CodeLowerName_6[0:3]:   ATTR_SET,
}

var _CodeNames = []string{
	_CodeName_0[0:11],
	_CodeName_0[11:17],
	_CodeName_0[17:23],
	_CodeName_0[23:30],
	_CodeName_0[30:33],
	_CodeName_0[33:42],
	_CodeName_0[42:51],
	_CodeName_0[51:61],
	_CodeName_0[61:70],
	_CodeName_0[70:80],
	_CodeName_0[80:92],
	_CodeName_1[0:8],
	_CodeName_1[8:18],
	_CodeName_1[18:31],
	_CodeName_1[31:38],
	_CodeName_1[38:51],
	_CodeName_2[0:11],
	_CodeName_2[11:17],
	_CodeName_2[17:28],
	_CodeName_2[28:46],
	_CodeName_2[46:50],
	_CodeName_2[50:60],
	_CodeName_3[0:6],
	_CodeName_4[0:15],
	_CodeName_4[15:26],
	_CodeName_5[0:3],
	_CodeName_5[3:8],
	_CodeName_5[8:16],
	_CodeName_5[16:33],
	_CodeName_5[33:36],
	_CodeName_5[36:46],
	_CodeName_6[0:3],
}

// CodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CodeString(s string) (Code, error) {
	if val, ok := _CodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Code values", s)
}

// CodeValues returns all values of the enum
func CodeValues() []Code {
	return _CodeValues
}

// CodeStrings returns a slice of all String values of the enum
func CodeStrings() []string {
	strs := make([]string, len(_CodeNames))
	copy(strs, _CodeNames)
	return strs
}

// IsACode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Code) IsACode() bool {
	for _, v := range _CodeValues {
		if i == v {
			return true
		}
	}
	return false
}
