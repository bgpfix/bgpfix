// Code generated by "enumer -type FlowType -trimprefix FLOW_"; DO NOT EDIT.

package attrs

import (
	"fmt"
	"strings"
)

const _FlowTypeName = "DSTSRCPROTOPORTPORT_DSTPORT_SRCICMP_TYPEICMP_CODETCP_FLAGSPKTLENDSCPFRAGLABEL"

var _FlowTypeIndex = [...]uint8{0, 3, 6, 11, 15, 23, 31, 40, 49, 58, 64, 68, 72, 77}

const _FlowTypeLowerName = "dstsrcprotoportport_dstport_srcicmp_typeicmp_codetcp_flagspktlendscpfraglabel"

func (i FlowType) String() string {
	i -= 1
	if i >= FlowType(len(_FlowTypeIndex)-1) {
		return fmt.Sprintf("FlowType(%d)", i+1)
	}
	return _FlowTypeName[_FlowTypeIndex[i]:_FlowTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FlowTypeNoOp() {
	var x [1]struct{}
	_ = x[FLOW_DST-(1)]
	_ = x[FLOW_SRC-(2)]
	_ = x[FLOW_PROTO-(3)]
	_ = x[FLOW_PORT-(4)]
	_ = x[FLOW_PORT_DST-(5)]
	_ = x[FLOW_PORT_SRC-(6)]
	_ = x[FLOW_ICMP_TYPE-(7)]
	_ = x[FLOW_ICMP_CODE-(8)]
	_ = x[FLOW_TCP_FLAGS-(9)]
	_ = x[FLOW_PKTLEN-(10)]
	_ = x[FLOW_DSCP-(11)]
	_ = x[FLOW_FRAG-(12)]
	_ = x[FLOW_LABEL-(13)]
}

var _FlowTypeValues = []FlowType{FLOW_DST, FLOW_SRC, FLOW_PROTO, FLOW_PORT, FLOW_PORT_DST, FLOW_PORT_SRC, FLOW_ICMP_TYPE, FLOW_ICMP_CODE, FLOW_TCP_FLAGS, FLOW_PKTLEN, FLOW_DSCP, FLOW_FRAG, FLOW_LABEL}

var _FlowTypeNameToValueMap = map[string]FlowType{
	_FlowTypeName[0:3]:        FLOW_DST,
	_FlowTypeLowerName[0:3]:   FLOW_DST,
	_FlowTypeName[3:6]:        FLOW_SRC,
	_FlowTypeLowerName[3:6]:   FLOW_SRC,
	_FlowTypeName[6:11]:       FLOW_PROTO,
	_FlowTypeLowerName[6:11]:  FLOW_PROTO,
	_FlowTypeName[11:15]:      FLOW_PORT,
	_FlowTypeLowerName[11:15]: FLOW_PORT,
	_FlowTypeName[15:23]:      FLOW_PORT_DST,
	_FlowTypeLowerName[15:23]: FLOW_PORT_DST,
	_FlowTypeName[23:31]:      FLOW_PORT_SRC,
	_FlowTypeLowerName[23:31]: FLOW_PORT_SRC,
	_FlowTypeName[31:40]:      FLOW_ICMP_TYPE,
	_FlowTypeLowerName[31:40]: FLOW_ICMP_TYPE,
	_FlowTypeName[40:49]:      FLOW_ICMP_CODE,
	_FlowTypeLowerName[40:49]: FLOW_ICMP_CODE,
	_FlowTypeName[49:58]:      FLOW_TCP_FLAGS,
	_FlowTypeLowerName[49:58]: FLOW_TCP_FLAGS,
	_FlowTypeName[58:64]:      FLOW_PKTLEN,
	_FlowTypeLowerName[58:64]: FLOW_PKTLEN,
	_FlowTypeName[64:68]:      FLOW_DSCP,
	_FlowTypeLowerName[64:68]: FLOW_DSCP,
	_FlowTypeName[68:72]:      FLOW_FRAG,
	_FlowTypeLowerName[68:72]: FLOW_FRAG,
	_FlowTypeName[72:77]:      FLOW_LABEL,
	_FlowTypeLowerName[72:77]: FLOW_LABEL,
}

var _FlowTypeNames = []string{
	_FlowTypeName[0:3],
	_FlowTypeName[3:6],
	_FlowTypeName[6:11],
	_FlowTypeName[11:15],
	_FlowTypeName[15:23],
	_FlowTypeName[23:31],
	_FlowTypeName[31:40],
	_FlowTypeName[40:49],
	_FlowTypeName[49:58],
	_FlowTypeName[58:64],
	_FlowTypeName[64:68],
	_FlowTypeName[68:72],
	_FlowTypeName[72:77],
}

// FlowTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FlowTypeString(s string) (FlowType, error) {
	if val, ok := _FlowTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FlowTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FlowType values", s)
}

// FlowTypeValues returns all values of the enum
func FlowTypeValues() []FlowType {
	return _FlowTypeValues
}

// FlowTypeStrings returns a slice of all String values of the enum
func FlowTypeStrings() []string {
	strs := make([]string, len(_FlowTypeNames))
	copy(strs, _FlowTypeNames)
	return strs
}

// IsAFlowType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FlowType) IsAFlowType() bool {
	for _, v := range _FlowTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
