// Code generated by "enumer -type Sub"; DO NOT EDIT.

package mrt

import (
	"fmt"
	"strings"
)

const (
	_SubName_0      = "BGP4MP_STATE_CHANGEBGP4MP_MESSAGE"
	_SubLowerName_0 = "bgp4mp_state_changebgp4mp_message"
	_SubName_1      = "BGP4MP_MESSAGE_AS4BGP4MP_STATE_CHANGE_AS4BGP4MP_MESSAGE_LOCALBGP4MP_MESSAGE_AS4_LOCALBGP4MP_MESSAGE_ADDPATHBGP4MP_MESSAGE_AS4_ADDPATHBGP4MP_MESSAGE_LOCAL_ADDPATHBGP4MP_MESSAGE_AS4_LOCAL_ADDPATH"
	_SubLowerName_1 = "bgp4mp_message_as4bgp4mp_state_change_as4bgp4mp_message_localbgp4mp_message_as4_localbgp4mp_message_addpathbgp4mp_message_as4_addpathbgp4mp_message_local_addpathbgp4mp_message_as4_local_addpath"
)

var (
	_SubIndex_0 = [...]uint8{0, 19, 33}
	_SubIndex_1 = [...]uint8{0, 18, 41, 61, 85, 107, 133, 161, 193}
)

func (i Sub) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _SubName_0[_SubIndex_0[i]:_SubIndex_0[i+1]]
	case 4 <= i && i <= 11:
		i -= 4
		return _SubName_1[_SubIndex_1[i]:_SubIndex_1[i+1]]
	default:
		return fmt.Sprintf("Sub(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SubNoOp() {
	var x [1]struct{}
	_ = x[BGP4MP_STATE_CHANGE-(0)]
	_ = x[BGP4MP_MESSAGE-(1)]
	_ = x[BGP4MP_MESSAGE_AS4-(4)]
	_ = x[BGP4MP_STATE_CHANGE_AS4-(5)]
	_ = x[BGP4MP_MESSAGE_LOCAL-(6)]
	_ = x[BGP4MP_MESSAGE_AS4_LOCAL-(7)]
	_ = x[BGP4MP_MESSAGE_ADDPATH-(8)]
	_ = x[BGP4MP_MESSAGE_AS4_ADDPATH-(9)]
	_ = x[BGP4MP_MESSAGE_LOCAL_ADDPATH-(10)]
	_ = x[BGP4MP_MESSAGE_AS4_LOCAL_ADDPATH-(11)]
}

var _SubValues = []Sub{BGP4MP_STATE_CHANGE, BGP4MP_MESSAGE, BGP4MP_MESSAGE_AS4, BGP4MP_STATE_CHANGE_AS4, BGP4MP_MESSAGE_LOCAL, BGP4MP_MESSAGE_AS4_LOCAL, BGP4MP_MESSAGE_ADDPATH, BGP4MP_MESSAGE_AS4_ADDPATH, BGP4MP_MESSAGE_LOCAL_ADDPATH, BGP4MP_MESSAGE_AS4_LOCAL_ADDPATH}

var _SubNameToValueMap = map[string]Sub{
	_SubName_0[0:19]:         BGP4MP_STATE_CHANGE,
	_SubLowerName_0[0:19]:    BGP4MP_STATE_CHANGE,
	_SubName_0[19:33]:        BGP4MP_MESSAGE,
	_SubLowerName_0[19:33]:   BGP4MP_MESSAGE,
	_SubName_1[0:18]:         BGP4MP_MESSAGE_AS4,
	_SubLowerName_1[0:18]:    BGP4MP_MESSAGE_AS4,
	_SubName_1[18:41]:        BGP4MP_STATE_CHANGE_AS4,
	_SubLowerName_1[18:41]:   BGP4MP_STATE_CHANGE_AS4,
	_SubName_1[41:61]:        BGP4MP_MESSAGE_LOCAL,
	_SubLowerName_1[41:61]:   BGP4MP_MESSAGE_LOCAL,
	_SubName_1[61:85]:        BGP4MP_MESSAGE_AS4_LOCAL,
	_SubLowerName_1[61:85]:   BGP4MP_MESSAGE_AS4_LOCAL,
	_SubName_1[85:107]:       BGP4MP_MESSAGE_ADDPATH,
	_SubLowerName_1[85:107]:  BGP4MP_MESSAGE_ADDPATH,
	_SubName_1[107:133]:      BGP4MP_MESSAGE_AS4_ADDPATH,
	_SubLowerName_1[107:133]: BGP4MP_MESSAGE_AS4_ADDPATH,
	_SubName_1[133:161]:      BGP4MP_MESSAGE_LOCAL_ADDPATH,
	_SubLowerName_1[133:161]: BGP4MP_MESSAGE_LOCAL_ADDPATH,
	_SubName_1[161:193]:      BGP4MP_MESSAGE_AS4_LOCAL_ADDPATH,
	_SubLowerName_1[161:193]: BGP4MP_MESSAGE_AS4_LOCAL_ADDPATH,
}

var _SubNames = []string{
	_SubName_0[0:19],
	_SubName_0[19:33],
	_SubName_1[0:18],
	_SubName_1[18:41],
	_SubName_1[41:61],
	_SubName_1[61:85],
	_SubName_1[85:107],
	_SubName_1[107:133],
	_SubName_1[133:161],
	_SubName_1[161:193],
}

// SubString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SubString(s string) (Sub, error) {
	if val, ok := _SubNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SubNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Sub values", s)
}

// SubValues returns all values of the enum
func SubValues() []Sub {
	return _SubValues
}

// SubStrings returns a slice of all String values of the enum
func SubStrings() []string {
	strs := make([]string, len(_SubNames))
	copy(strs, _SubNames)
	return strs
}

// IsASub returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Sub) IsASub() bool {
	for _, v := range _SubValues {
		if i == v {
			return true
		}
	}
	return false
}
